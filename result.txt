---------------[03-1.md]-------------------
과 모델 실습 장고에서 모델 은 데이터베이스의 구조를 정의 하고 데이터를 관리 하는 일을 합니다 파이썬 클래스로 표현한 데이터베이스의 설계도라고 생각하면 좋습니다 모델을 사용하면 복잡한 데이터베이스 작업을 쉽게 할 수 있습니다 데이터를 저장하거나 수정하는 등의 데이터베이스 작업을 문법이 아닌 간단한 파이썬 코드로 할 수 있습니다 모델 실습을 통해 우리는 데이터의 구조를 정의하고 이를 데이터베이스와 연결하는 방법을 배우게 됩니다 이제 모델을 직접 만들고 사용해 보면서 장고에서 데이터를 어떻게 구조화하고 관리하는지 알아봅시다 개발 환경 설정 개발 환경 설정이 익숙해지셨다면 아래 코드를 이용해서 단시간에 환경 설정을 마무리할 수 있습니다 아래 코드를 복사해서 작업할 폴더의 터미널에 를 하면 자동으로 설치가 완료됩니다 마지막 코드에서는 를 입력해 주어야 합니다 이 실습에서는 폴더 대신 폴더를 생성하고 라이브러리를 추가합니다 는 이 실습에 포함되어 있는 이미지 데이터를 다루기 위해서 필요한 라이브러리입니다 위 코드를 통해서 앱을 생성하는 것까지 완료할 수 있습니다 설정 파일 수정 파일을 열고 를 수정해줍니다 설정 위와 같은 구조를 위해 프로젝트 레벨과 앱 레벨의 파일을 설정합니다 파일을 다음과 같이 수정합니다 앱에 파일을 생성하고 다음 내용을 추가합니다 설정 앱의 파일에 함수를 작성합니다 템플릿 작성 의 안에 있는 의 경로를 로 수정해 줍니다 이 부분 입니다 폴더를 만들고 와 파일을 생성합니다 각 파일에 아래 코드를 입력해주세요 블로그 목록 페이지 게시판 블로그 상세 페이지 목록 모델 정의 파일에 다음 내용을 추가합니다 글의 제목 최대 자 글의 내용 글 작성 시간 자동으로 현재 시간 저장 글 수정 시간 수정할 때마다 자동으로 갱신 에서 모델 은 데이터베이스의 구조를 클래스로 표현한 것입니다 위의 코드를 데이터베이스의 표로 바꿔보면 아래와 같습니다 필드 이름 데이터 타입 설명 글 제목 최대 자 글 내용 메인 이미지 파일 경로 선택 사항 글 작성 시간 자동으로 현재 시간 저장 글 수정 시간 수정 시 자동 갱신 이렇게 모델 클래스가 데이터베이스 테이블로 변환되어 데이터를 저장하고 관리하게 됩니다 모델은 우리가 저장하고 사용할 데이터의 형태를 결정하는 아주 중요한 기능입니다 데이터베이스 마이그레이션 모델을 생성했으므로 데이터베이스에 반영해야 합니다 터미널에서 아래 명령어를 입력합니다 가상환경이 활성화되어있는지 확인해주세요 마이그레이션 모델 마이그레이션 과정 에서 데이터베이스를 변경할 때는 와 라는 두 단계를 거칩니다 는 변경 계획을 세우는 단계입니다 모델을 수정하면 가 이를 감지하고 변경 내용을 담은 파일을 만듭니다 이 파일은 앱 폴더 안의 폴더에 저장됩니다 실제 데이터베이스는 아직 그대로입니다 는 이 계획을 실제로 실행하는 단계로 를 실행하면 데이터베이스가 실제로 변경됩니다 관리자 페이지 설정 의 페이지 는 웹사이트의 데이터와 설정을 관리할 수 있는 내장 인터페이스입니다 개발자와 관리자가 데이터베이스 내용을 쉽게 조작하고 웹사이트를 효율적으로 관리할 수 있게 해줍니다 이런 페이지를 사용하기 위해서는 슈퍼유저라는 관리자 계정이 필요합니다 슈퍼유저 는 프로젝트의 관리자 권한을 가진 특별한 사용자입니다 슈퍼 유저는 관리자 페이지에 접근할 수 있으며 데이터베이스의 모든 정보를 조회 생성 수정 삭제할 수 있는 권한 을 갖습니다 그러니 우리는 수퍼유저 계정의 보안에 각별히 주의 해야 하며 프로젝트 관리자만이 이 계정 정보를 알고 있어야 합니다 파일에 다음 내용을 추가해 페이지를 수정합니다 페이지에서 모델을 관리할 수 있도록 하는 것입니다 아래 명령어를 입력해 관리자 계정을 생성합니다 명령을 실행한 후 사용자 이름 이메일 주소 비밀번호 비밀번호 확인 을 입력합니다 비밀번호를 입력할 때 보안을 위해서 화면에 아무것도 표시되지 않습니다 화면에 뜨지 않더라도 그냥 입력하시면 됩니다 너무 간단한 비밀번호는 거부될 수 있습니다 슈퍼유저 관리자 계정 생성 예시 서버를 실행한 후 페이지에 접속해서 방금 생성한 슈퍼유저 계정 을 이용해 로그인을 합니다 페이지에서 버튼을 눌러 게시물을 개 만들어주세요 게시물생성 게시물생성 우리가 만든 게시글을 목록으로 볼 수 있습니다 게시물생성 모델 수정 작성한 게시글 목록을 보면 목록에 적혀있는 제목들이 우리가 작성한 제목이 아닙니다 는 우리가 작성한 내용들 중에서 어떤 정보를 보여줘야 할지 모릅니다 그래서 처럼 의미 없는 이름을 보여줍니다 우리가 원하는 건 게시글의 제목을 보는 것입니다 이때 우리는 메서드를 사용할 수 있습니다 는 게시물 목록을 볼 때 메서드를 소환해서 게시물을 어떻게 보여줄지 결정합니다 위 코드는 에게 게시글을 목록에 보여줄 때는 을 사용하라고 설정하는 것입니다 뿐만 아니라 단순 문자열이나 등을 사용해 반환하라고 시킬 수 있습니다 아래는 수정한 파일입니다 글의 제목 최대 자 글의 내용 글 작성 시간 자동으로 현재 시간 저장 글 수정 시간 수정할 때마다 자동으로 갱신 를 수정하면 아래 이미지처럼 원하는 데로 우리가 작성한 제목이 목록에 보입니다 모델수정 관리자 페이지 수정 관리자페이지는 사용자가 원하는 데로 커스터마이징을 할 수 있습니다 아래 코드로 파일을 수정해 줍니다 기존 게시글 목록에서는 제목만 볼 수 있었습니다 하지만 위 코드로 수정하게 되면 제목뿐만이 아니라 게시물 번호 작성날짜 수정날짜를 목록에서 볼 수 있습니다 각 코드에 대해서 간단히 설명하면 이라는 커스텀 관리자 클래스를 정의합니다 을 상속받아 의 기본 관리 기능을 그대로 가져오면서 우리가 원하는 기능을 더할 수 있습니다 의 속성을 사용합니다 속성은 관리자 페이지에서 목록에 보여질 필드를 지정할 수 있습니다 보여질 필드를 지정했기 때문에 이제 을 볼수 있습니다 는 관리자 사이트에 모델을 등록하고 이 모델에 대한 설정을 클래스로 사용하라고 지정하는 것입니다 아래는 위의 과정을 간단하게 시각화 한 것입니다 어드민수정 상속받은 기본 클래스 과 속성 커스텀 설정 가 결합되어 을 만듭니다 함수를 통해 모델과 클래스가 결합되어 페이지로 보내집니다 어드민수정확인 코드를 수정했을 때 보여지는 화면입니다 와 제목 생성날짜와 수정날짜가 보이는 것을 확인할 수 있습니다 모델 사용하기 모델의 내용을 템플릿에서 보여줄 수 있게 와 템플릿을 수정합니다 사용할 모델을 불러오는 코드입니다 게시판 목록 뷰 코드를 수정하면서 우리는 다음과 같은 새로운 코드를 보게 됩니다 이 코드는 장고에서 사용하는 쿼리 입니다 쿼리에 대해서는 다음 장에서 알아보도록 하겠습니다

---------------[03-2.md]-------------------
과 실습 의 은 개발자가 데이터베이스 쿼리 를 쉽게 다룰 수 있게 해주는 도구입니다 여기서 쿼리 는 데이터베이스에 하는 질문입니다 우리가 쿼리로 질문을 하면 데이터베이스는 그에 대한 답을 줍니다 예를 들어 모든 상품의 이름을 알려줘 라고 물으면 데이터베이스는 상품 이름 목록을 답으로 줍니다 이 질문을 하려면 이라는 문법을 알아야합니다 하지만 장고에서는 이 을 몰라도 질문을 할 수 있도록 만들었습니다 우리가 파이썬으로 질문하면 이 질문을 이라는 번역기가 로 변환하여 질문해줍니다 작동원리 작동 예시 을 사용하면 개발자는 을 직접 작성할 필요가 없고 데이터베이스 종류가 바뀌어도 코드를 수정할 필요가 없다는 장점이 있습니다 실습을 통해 의 쿼리에 대해 알아봅시다 쿼리 실습을 위해서는 이전 실습에서 만든 모델이 있어야 합니다 실습 준비 을 실습하기 위해 쉘 을 사용합니다 터미널에 아래 명령어를 입력합니다 명령어 실행 후 터미널 창에 모양이 나타나는 것을 확인해 주세요 이 나타나면 쉘에 진입했다는 뜻입니다 실습에서는 모양 옆에 명령어를 입력하면 됩니다 쉘 사용을 중지하려면 을 입력합니다 기본 기본적인 쿼리에 대해서 이야기하기 전에 객체 가 무엇인지 먼저 알아봅시다 간단하게 말해서 객체 는 우리가 다루는 데이터 한 묶음을 의미합니다 블로그를 예시로 들어보겠습니다 우리가 블로그의 구성을 생각해보면 전체 블로그 글의 목록 하나하나의 블로그 글 글의 제목 내용 댓글 등으로 구성이 될 것 입니다 여기서 객체는 하나하나의 블로그 글 이라고 생각하면 됩니다 이 글이 모인 목록은 데이터베이스가 되고 글에 속해있는 제목 내용 댓글은 속성이 됩니다 쉘에서 모델을 사용하기 위해 에서 모델을 불러옵니다 모든 객체 가져오기 의 타입 확인 의 사용 가능한 메서드와 속성 확인 메서드는 모든 객체를 반환합니다 과 함수는 내장 함수로 객체의 타입과 사용 가능한 속성 및 메서드를 확인하는 데 사용됩니다 는 데이터베이스의 기본적인 데이터 처리 기능 을 나타내는 약어로 다음과 같은 네 가지 핵심 작업을 의미합니다 생성 새로운 데이터를 만들어 데이터베이스에 추가합니다 읽기 데이터베이스에서 정보를 조회하거나 검색합니다 갱신 기존의 데이터를 수정하여 업데이트합니다 삭제 데이터베이스에서 기존 데이터를 제거합니다 이 네 가지 기능은 대부분의 데이터베이스 관리 시스템과 웹 애플리케이션에서 기본적으로 제공되는 핵심 기능입니다 작업을 통해 데이터를 효과적으로 관리하고 조작할 수 있습니다 아래에서 더 자세히 알아봅시다 연산 는 데이터베이스에서 정보를 조회하거나 검색 하는 기능입니다 의 순서대로 정렬 의 역순으로 정렬 최신 글이 위에 오도록 원하는 하나의 객체 가져오기 조건에 맞는 객체 모두 가져오기 를 통해서 데이터를 정렬할 수 있습니다 은 선택한 하나의 객체를 반환합니다 는 조건에 맞는 모든 객체를 쿼리셋으로 반환합니다 쿼리셋은 인덱싱 과 슬라이싱 이 가능하지만 음수 인덱싱 은 지원되지 않습니다 과 의 차이 에서 데이터를 찾을 때 세 가지 방법을 주로 사용합니다 세가지 모두 에서 데이터를 조회할 용도로 사용하기에 비슷해 보이지만 중요한 차이가 있습니다 아래의 그림을 보면서 함께 알아봅시다 첫번째로 은 조건 없이 있는 모든 데이터 를 가져옵니다 에게 모든 학생의 정보 모두 달라고 요청하는 것입니다 두번째로 은 딱 하나의 결과 만을 찾습니다 예를 들어 은 가 인 난성호 학생의 정보를 가져옵니다 학번이 번인 학생은 반드시 있어 그 학생 정보 줘 라고 확신을 가지고 에게 요청하는 것입니다 하지만 이 확신 때문에 은 만약 요청하는 데이터가 없거나 여러개가 있다면 오류를 발생 시킵니다 마지막으로 는 조건에 맞는 모든 것 을 찾아줍니다 위의 이미지처럼 학년 은 학년인 오효림과 평하진의 정보를 가져옵니다 학년 학생들 있으면 명단 좀 줘볼래 라고 에게 부드럽게 요청하는 것과 비슷합니다 는 결과가 있든 없든 하나이든 여러 개이든 상관없이 조용히 결과를 제공합니다 조건에 맞는 데이터가 없다면 빈 목록을 줍니다 은 모든 데이터를 은 반드시 존재해야 하는 하나의 데이터를 는 조건에 맞는 데이터가 있으면 찾아주는 방식으로 데이터를 조회합니다 이 차이를 알고 상황에 맞게 알맞은 방법을 사용하면 됩니다 주요 필터 조건 아래는 쿼리에서 사용하는 연산자입니다 같음 같지 않음 작음 작거나 같음 큼 크거나 같음 연산자의 사용 예시와 추가적으로 자주 사용되는 조건들 입니다 가 보다 작은 객체들 제목에 가 포함된 객체들 대소문자 상관없이 정확하게 일치하는 항목 찾기 는 조건이 포함된 객체를 찾습니다 는 대소문자 상관없이 정확하게 일치하는 것을 찾습니다 이런 연산자들과 조건을 통해서 필터를 사용 할 수 있습니다 연산 는 새로운 데이터 를 생성해서 데이터베이스에 추가 하는 기능입니다 새 객체 생성 및 저장 새 글 내용 또는 새 글 내용 연산 는 데이터베이스에서 기존 데이터를 제거 하는 기능입니다 특정 객체 삭제 조건에 맞는 모든 객체 삭제 임시 특정 객체를 하나씩 삭제할 수도 있고 여러 객체를 한번에 삭제할 수도 있습니다 연산 는 기존의 데이터를 수정하여 업데이트 하는 기능입니다 수정된 제목 수정 후에는 반드시 를 해주어야 에 반영이 됩니다 참고 사항 쿼리셋에 대해서 더 궁금한 사항이 있다면 아래의 장고 공식 문서를 참고하세요 공식 문서

---------------[03-3.md]-------------------
과 구현과 미디어 파일 실습 게시물 생성과 삭제 의 을 사용하여 게시판의 기본 기능인 게시물 생성과 삭제 를 구현해보겠습니다 이는 작업 중 와 에 해당합니다 이전 실습에서 만든 모델을 이용해서 실습을 진행합니다 먼저 앱의 와 파일을 수정하여 게시물 생성과 삭제 기능을 추가해 봅시다 앱의 수정 파일에 패턴을 추가합니다 이 코드에서 새로 추가된 패턴을 자세히 살펴보면 이 패턴은 게시물 생성을 위한 로 부분은 게시물의 제목을 에 직접 입력하여 전달받는 방식입니다 예를 들어 안녕하세요 라고 입력하면 안녕하세요 라는 제목의 게시물이 생성됩니다 이 패턴은 게시물 삭제를 하는 입니다 위의 생성 과는 조금 다르게 부분에 삭제할 게시물의 번호를 에 직접 입력하여 전달받는 방식입니다 만약 이라고 입력하면 번 게시물이 삭제되는 것입니다 앱의 수정 파일에 에 접속하면 실행될 함수들을 추가합니다 각 함수를 간단히 살펴봅시다 함수는 제목 형식의 에 접속하면 실행됩니다 이 함수는 에서 받은 제목을 사용하여 새 게시물을 만듭니다 의 메서드로 새로운 객체를 생성하고 로 이를 데이터베이스에 저장합니다 작업이 완료되면 를 통해 사용자를 게시물 목록 페이지로 이동됩니다 함수는 숫자 형식의 에 접속하면 실행됩니다 이 함수는 에서 받은 숫자 를 사용하여 해당 게시물을 찾아 삭제합니다 의 로 지정된 의 게시물을 데이터베이스에서 찾고 로 그 게시물을 삭제합니다 삭제 작업이 완료되면 게시물 생성 때와 마찬가지로 를 통해 사용자를 게시물 목록 페이지로 이동합니다 서버 실행 및 작동 테스트 이제 서버를 실행하고 새로 추가한 기능들을 테스트해봅시다 게시물 생성 다음과 같은 을 브라우저에 입력해보세요 각 에 접속하면 해당 제목을 가진 새로운 게시물이 생성되고 게시물 목록 페이지로 이동합니다 게시물 삭제 생성된 게시물의 를 확인한 후 다음과 같은 을 입력해보세요 각 에 접속하면 해당 를 가진 게시물이 삭제되고 게시물 목록 페이지로 이동합니다 이미지 업로드 실습 블로그에 단순히 글만 있다면 어떨까요 글만 있는 블로그도 물론 정보를 전달할 수 있지만 독자들의 관심을 끌고 내용을 효과적으로 전달하는 데에는 한계가 있을 수 있습니다 그래서 여러분의 생각과 경험을 더욱 생생하게 전달하기 위해 이미지 동영상 등 다양한 미디어 파일들이 함께 사용합니다 는 이런 다양한 미디어 파일들을 쉽게 관리할 수 있게 도와줍니다 파일을 업로드하고 저장하고 웹페이지에 표시하는 모든 과정을 가 체계적으로 관리해줍니다 이 실습에서는 를 사용하여 블로그 게시물에 이미지를 추가하고 관리하는 방법을 배워보겠습니다 이전 장에서 개발 환경을 설정할 때 를 이미 설치했습니다 혹시 설치하지 않았거나 확실하지 않다면 위 명령어를 실행하여 를 설치해주시면 됩니다 수정 먼저 우리의 블로그 게시물에 이미지를 추가할 수 있게 만들어 봅시다 파일을 수정합니다 여기서 라는 이름의 새로운 이미지 필드를 추가했습니다 이 필드가 바로 이미지를 저장할 수 있게 해주는 필드입니다 는 업로드된 이미지를 폴더에 저장하라고 에게 알려주는 것이고 와 는 이 필드가 필수가 아닌 선택사항이라는 것입니다 즉 모든 게시물에 이미지가 반드시 있어야 하는 것은 아닙니다 모델을 변경했으므로 데이터베이스에 이 변경사항을 적용해야 합니다 아래 명령어를 입력해 변경사항을 적용합니다 수정 이제 가 이미지 파일을 어디에 저장하고 어떻게 불러올지 지정해줘야합니다 파일에 미디어 파일 설정을 추가합니다 폴더 생성 프로젝트의 가장 상위 폴더에 폴더를 만들어주세요 폴더에는 웹사이트에서 업로드한 이미지가 저장됩니다 서버 실행 및 작동 테스트 지금까지 한 작업을 저장하고 서버를 실행해봅시다 관리자 페이지에서 이미지를 포함한 게시물을 개 만들어보세요 이미지 업로드 기능이 제대로 작동하는지 확인해봅시다 수정 이제 웹에서 업로드한 이미지를 볼 수 있게 해봅시다 의 설정과 기능을 사용하기 위해 모듈들을 임포트 하고 프로젝트의 파일에 패턴을 추가합니다 추가한 마지막 줄인 코드는 미디어 파일을 서빙하기 위한 패턴을 추가합니다 이 로 웹사이트에서 업로드된 파일에 접근할 수 있습니다 은 웹 브라우저에서 미디어 파일에 접근할 때 사용되는 경로입니다 예를 들어 폴더가 로 설정되어 있다면 와 같은 주소로 이미지에 접근할 수 있습니다 는 미디어 파일이 실제 컴퓨터에 저장된 폴더의 위치를 지정합니다 여기서는 우리가 이전에 생성한 폴더를 말합니다 정리하자면 이 코드는 에 요청이 들어오면 폴더에서 파일을 찾아 웹에 보여주는 역할을 템플릿 수정 관리자 페이지에서 올린 파일을 템플릿상에서 볼 수 있도록 템플릿을 수정합니다 게시판 검색 서버 실행 및 작동 테스트 이제 서버를 실행해서 작동이 되는지 확인해봅시다 생성된 게시물의 상세 페이지에서 이미지가 표시되는 것을 확인할 수 있습니다 만약 이미지가 보이지 않는다면 파일이 제대로 저장되었는지 확인해보세요 폴더에 이미지 파일이 있어야 합니다 같은 이름의 파일을 여러 번 업로드하면 는 자동으로 파일 이름에 난수를 추가하여 저장합니다 검색 기능 구현 웹 애플리케이션에서 검색 기능은 사용자 경험을 크게 향상시키는 핵심적인 요소입니다 를 사용하여 효과적인 검색 기능을 구현하는 방법을 살펴보겠습니다 이 기능을 통해 사용자들은 원하는 정보를 빠르고 쉽게 찾을 수 있게 됩니다 수정 검색 기능을 구현하기 위해 파일을 수정해야 합니다 아래의 코드는 검색 로직을 포함한 뷰 함수입니다 장고의 객체와 메서드를 활용해 사용자가 입력한 검색어를 로 가져와서 객체를 통해 제목과 내용에서 대소문자 구분 없이 검색합니다 을 사용하여 부분 일치도 찾아내며 로 중복 결과를 제거합니다 이 방식으로 사용자의 검색어와 관련된 게시물만을 정확하게 필터링하여 표시할 수 있으며 검색어가 없을 때는 모든 게시물을 보여줍니다 객체 의 객체는 조건이나 복잡한 조건부 검색을 구현할 때 사용하는 유용한 도구 입니다 예를 들어서 우리의 검색 기능에서는 아래 예시와 같이 객체를 사용했습니다 연산자는 조건을 나타냅니다 이 코드는 제목에 검색어가 포함되어 있거나 아니면 내용에 검색어가 포함되어 있는 조건 을 표현합니다 템플릿에 검색 폼 추가 다음으로 사용자가 검색어를 입력할 수 있는 폼을 템플릿에 추가합니다 게시판 검색 위 코드를 적용하면 우리의 웹 페이지에 검색 기능이 추가됩니다 아래에 코드에 대한 자세한 설명이 있습니다 검색 이 코드로 인해 페이지 상단에 검색창과 검색 버튼이 생성됩니다 사용자가 검색창에 키워드를 입력하고 검색 버튼을 클릭하거나 키를 누르면 검색이 실행됩니다 이 때 입력된 검색어는 의 쿼리 매개변수로 서버에 전송됩니다 에 검색어 가 추가된 것을 볼 수 있습니다 서버에서는 전송받은 검색어를 이용해 데이터베이스를 검색합니다 객체를 사용한 우리의 검색 로직은 게시물의 제목과 내용 중 검색어가 포함된 게시물만을 필터링합니다 검색 결과에 해당하는 게시물만이 페이지에 표시됩니다 만약 검색어에 해당하는 게시물이 없다면 아무 게시물도 표시되지 않습니다 참고 사항 객체에 대해서 더 궁금한 사항이 있다면 아래의 장고 공식 문서를 참고하세요 공식 문서 객체

---------------[03-4.md]-------------------
과 모델 관계 실습 데이터베이스에서 모델 관계 는 서로 다른 테이블 간의 연결을 의미하며 이는 데이터의 구조와 의미를 정의하고 일관성을 유지하는 데 중요한 역할을 합니다 에서는 주로 일대다 다대다 일대일 세 가지 유형의 관계를 다룹니다 실습을 통해 이러한 각 관계 유형을 에서 어떻게 구현하고 활용하는지 자세히 알아보겠습니다 개발 환경 설정 아래 코드를 복사해서 작업할 폴더의 터미널에 합니다 폴더를 생성하고 가상환경 설치 라이브러리 설치 앱 생성까지 완료되었습니다 수정 이제는 를 한번에 수정해 봅시다 와 설정은 한국어와 한국 시간대를 사용하도록 하는 것 입니다 장고에서 과 를 사용할 수 있도록 설정을 수정해 줍니다 프로젝트 디렉토리에 와 폴더도 생성해주세요 수정 모델은 블로그 게시물의 구조를 정의하며 제목 내용 대표 이미지 첨부 파일 생성 시간 수정 시간 등의 필드를 포함합니다 이때 대표 이미지와 첨부 파일은 각각 연 월 일 과 연 월 일 형식의 폴더에 저장됩니다 한 폴더 내에 너무 많은 파일들이 있으면 특정 파일을 찾기 어려워지고 시스템 성능에도 악영향을 미칠 수 있습니다 그것을 방지하기 위해 자세한 경로를 사용합니다 관리자 페이지 수정 및 슈퍼유저 생성 파일을 수정합니다 모델을 관리자 페이지에 등록합니다 이제 관리자 인터페이스에서 게시물을 쉽게 생성 조회 수정 삭제할 수 있게 됩니다 데이터베이스에 변경사항을 적용하고 슈퍼유저를 생성합니다 수정 수정 수정 앱 안에 폴더를 만들고 파일과 파일을 빈 상태로 만들어 주세요 서버 실행 및 테스트 관리자 페이지 에 접속해서 블로그 포스트 개를 만듭니다 데이터베이스 기초 데이터베이스에서 모델 관계는 서로 다른 테이블 간의 연결을 의미합니다 이는 데이터의 구조와 의미를 정의하고 일관성을 유지하는 데 중요한 역할을 합니다 데이터베이스 주요 용어 데이터베이스를 다루는 아주 간단한 용어 몇 가지만 소개하고 넘어가겠습니다 데이터베이스 관계도 데이터베이스관계도 관계형 데이터베이스 데이터를 표 형태의 구조 테이블 로 저장하고 관리하는 데이터베이스 시스템입니다 각 테이블은 서로 관계를 가질 수 있어 복잡한 데이터 구조를 효율적으로 표현하고 관리할 수 있습니다 엔티티 이미지에서 볼 수 있듯이 엔티티는 데이터베이스에서 하나의 독립적인 객체나 개념 을 나타냅니다 예를 들어 학생 정보를 담고 있는 테이블 이 하나의 엔티티가 됩니다 이 테이블에는 학번 이름 주소 전화번호 등의 정보가 포함되어 있습니다 기본키 이미지에서 학번 열이 기본키로 표시되어 있습니다 기본키는 각 행를 고유하게 식별하는 속성으로 여기서는 등의 학번이 각 학생을 구별하는 고유한 식별자 역할을 합니다 외래키 이미지의 아래쪽 테이블에서 학번 열이 외래키로 사용되고 있습니다 이 외래키는 위쪽 테이블의 기본키를 참조하여 두 테이블 간의 관계를 설정합니다 예를 들어 학생의 신청과목 정보가 학번을 통해 학생 정보와 연결됩니다 엔티티 간의 관계를 시각적으로 표현한 다이어그램입니다 를 통해 데이터베이스의 구조와 엔티티 간의 관계를 한눈에 파악할 수 있습니다 모델 관계 유형 에서는 주로 일대다 다대다 일대일 세 가지 유형의 관계를 다룹니다 일대다 관계의 예로는 학교와 학생의 관계 를 들 수 있습니다 한 학교에는 여러 학생이 있지만 각 학생은 하나의 학교에만 속하는 것처럼 일 쪽의 하나의 레코드가 다 쪽의 여러 레코드와 연결될 수 있습니다 에서는 이를 필드를 사용하여 구현합니다 다대다 관계는 학생과 수업의 관계 로 설명할 수 있습니다 한 학생이 여러 수업을 들을 수 있고 한 수업에 여러 학생이 참여할 수 있듯이 양쪽 모델의 인스턴스가 서로 여러 개의 인스턴스와 연결될 수 있습니다 에서는 이러한 관계를 를 사용하여 구현합니다 마지막으로 일대일 관계는 사용자와 학번의 관계 를 예로 들 수 있습니다 각 사용자는 하나의 번호만을 가지며 학번은 하나의 사용자에만 속하는 것처럼 한 모델의 각 인스턴스가 다른 모델의 인스턴스와 단 하나씩만 연결됩니다 에서는 이를 를 사용하여 구현합니다 일대다 다대다 일대일 일대다 다대다 일대일 지금까지 우리는 프로젝트의 기본 구조를 설정하고 데이터베이스의 기초 개념과 모델 관계 유형에 대해 학습했습니다 이러한 기본 지식을 바탕으로 다음 섹션에서는 일대다 관계와 다대다 관계를 실제로 구현하는 방법에 대해 알아보겠습니다 이를 통해 데이터베이스 이론이 실제 모델에서 어떻게 적용되는지 이해할 수 있을 것입니다

---------------[03-5.md]-------------------
과 모델 관계 실습 이전 장에서 우리는 모델을 만들었습니다 이번 장에서는 블로그를 좀 더 풍부하게 만들기 위해 여러 기능을 추가해보겠습니다 태그 댓글 등의 기능들을 직접 추가해 보면서 모델 관계를 직접 구현하고 활용해봅시다 글쓴이 추가하기 게시물의 글쓴이를 나타낼 수 있게 을 추가해봅시다 생각해 보면 글쓴이 한명은 여러 글을 쓸 수 있지만 글 하나가 여러 글쓴이를 가질 수는 없습니다 그러니 관계에 사용하는 를 이용해 를 수정해봅시다 이때 주의해야 할 점이 있습니다 관계에서 는 항상 쪽에 작성합니다 예를 들어 한 사용자가 여러 게시물을 작성 할 수 있으므로 는 게시물 모델에 둡니다 이렇게 하면 각 게시물은 자신의 작성자를 쉽게 참조할 수 있고 한 사용자의 모든 게시물을 효율적으로 찾을 수 있습니다 반대로 를 사용자 모델에 두면 여러 문제가 발생합니다 예를 들어 한 사용자가 개의 게시물을 작성했다고 가정해 봅시다 이 경우 사용자 모델에 개의 게시물 참조를 저장해야 하며 새 게시물을 작성할 때마다 사용자 정보를 수정해야 합니다 또한 사용자가 작성할 수 있는 게시물 수에 제한이 생기고 특정 게시물의 작성자를 찾으려면 모든 사용자 정보를 검색해야 하는 비효율이 발생합니다 이런 이유로 는 항상 다수 쪽인 게시물 모델에 두는 것 이 바람직합니다 모델을 수정했으니 과 를 해줍니다 이때 을 하면 아래와 같은 알림 사항이 뜹니다 알림사항 모델에 필드를 새로 넣으려고 하는데 이 필드는 반드시 값이 있어야 한다는 조건이 있습니다 그런데 이미 있던 게시물들은 정보가 없기 때문에 생긴 문제입니다 이때 는 이 문제를 해결할 두 가지 방법을 제안하는데 지금 모든 기존 게시물에 대해 임시로 같은 값을 넣는 방법 일단 멈추고 코드에서 기본값을 정해주는 방법 입니다 번을 입력하면 새로운 필드에 대한 기본값을 입력하라는 프롬프트가 나타납니다 이때 프롬프트에 을 입력하면 데이터베이스의 모델에서 가 인 사용자가 모든 기존 게시물의 로 설정됩니다 위 이미지 처럼 이 추가된 것을 볼 수 있습니다 실습 아래는 수정한 에서 추가된 코드입니다 이 코드는 유저를 삭제했을 때 이 유저와 연관된 게시물을 함께 삭제하겠다는 의미입니다 다른 유저 계정을 생성해서 실행이 되는지 테스트 해봅시다 우선 서버를 키고 관리자페이지 사용자 추가를 클릭해서 새로운 유저를 만들어 줍니다 임의로 라는 유저를 생성했습니다 사용자 들 을 클릭해보면 유저가 한명 더 생성된 것을 확인할 수 있습니다 유저생성확인 게시물을 개 더 작성해 줍니다 이때 은 이미지와 같이 새로 만든 유저로 설정해 주세요 추가글생성 게시물을 개 더 추가했다면 이제 총 게시물은 개가 되었습니다 이제 유저를 삭제해봅시다 사용자 들 에서 삭제할 유저를 선택하고 액션에서 삭제 선택 실행을 누르면 유저가 삭제됩니다 사용자삭제 를 확인해보면 으로 만든 게시물이 삭제된 것을 확인 할 수 있습니다 게시물삭제확인 파일을 수정해 페이지에서 게시물이 잘 보이는지 확인해봅시다 유저가 삭제되었을 때 게시글을 보존하고 싶다면 글쓴이를 빈칸으로 만들 수 있습니다 아래 코드 처럼 을 대신 로 설정하면 가 빈칸이 됩니다 을 사용하고 싶으면 과 같이 이 필드에 값이 들어 갈 수 있게 설정해야합니다 태그 댓글 기능 추가하기 이번에는 태그 와 댓글 을 추가해 봅시다 태그 에 대해서 생각해보면 한 게시물은 여러개의 태그를 가질 수 있고 한 태그는 여러 게시물에 속할 수 있습니다 그러니 게시물과 태그는 다대다 관계를 이룹니다 댓글 은 하나의 게시물에서 여러 댓글을 가질 수 있습니다 하지만 댓글은 하나의 게시물에만 속합니다 그러니 게시물과 댓글은 일대다 관계를 가집니다 앞서 실습했던 것과 같이 일대다 관계에는 를 다대다 관계에는 를 사용합니다 수정하기 우선 를 수정해 태그와 댓글 모델을 추가합니다 필드를 추가합니다 새로운 모델을 추가합니다 모델에 필드를 추가하여 모델과 다대다 관계 를 설정합니다 모델을 새로 생성하고 필드를 통해 모델과 일대다 관계 를 설정했습니다 이때 모델에서 를 사용하여 모델에서 연결된 댓글들을 쉽게 접근할 수 있게 했습니다 여기서 은 에서 를 부를 때 사용할 이름입니다 템플릿 문법에서 아래와 같이 호출됩니다 모델을 변경했으므로 이를 데이터베이스에 반영해야 합니다 수정하기 새로 만든 모델들을 관리자 페이지에서 관리할 수 있도록 파일을 수정합니다 이제 서버를 키고 관리자 페이지에서 변경사항을 확인해봅시다 댓글태그추가 왼쪽 상단 위에 와 가 추가된 것을 볼 수 있습니다 또 새 글을 작성할 때 태그를 선택할 수 있도록 추가되었습니다 댓글과 태그을 달아보세요 이제 관리자 페이지에서 작성한 댓글과 태그를 사이트에서 볼수 있도록 만들어 봅시다 템플릿 파일 수정하기 블로그 목록과 상세 페이지에서 태그와 댓글을 표시하도록 템플릿을 수정합니다 댓글이나 태그를 가져올때 다음과 같은 코드는 사용하지 않습니다 대신 아래의 코드를 사용해야 합니다 에서 나 를 직접 사용하면 실제 데이터를 보여주지 않습니다 비유하자면 책이 꽂혀있는 책장을 가리키기만 하는 것과 같아서 책의 내용을 볼 수 없습니다 그래서 을 사용합니다 는 책장에서 모든 책을 꺼내 하나씩 읽어보는 것과 같습니다 이렇게 하면 실제 댓글이나 태그 데이터를 가져와서 보여줄 수 있습니다 와 는 많은 쪽 의 관계를 나타내기 때문에 이런 방식을 사용합니다 하나의 게시물에 여러 댓글이나 태그가 연결될 수 있기 때문에 이런 경우에는 성능 최적화를 위해 는 직접 모든 댓글과 태그를 가져오지 않고 여기 댓글들이 있어요 라고 알려주기만 합니다 만약 세부 내용이 필요하다면 을 사용해 실제 데이터를 불러옵니다 이런 방식은 필요할 때만 데이터베이스 쿼리를 실행하여 효율성을 높힙니다 반면에 하나 쪽 관계 예 댓글에서 게시물로의 관계 는 직접 접근이 가능합니다 추가적으로 을 사용하면 아래와 같은 문구가 출력됩니다 댓글태그확인 상세페이지 화면입니다 위에서 부터 태그와 댓글 댓글을 작성할 수 있는 폼까지 있는 것을 확인 할 수 있습니다 태그 모아보기 기능 추가하기 태그를 클릭하면 태그가 달린 게시물을 모아서 볼 수 있도록 만들어봅시다 수정하기 우선 별로 모아서 볼 수 있도록 패턴을 추가해줍니다 수정하기 에 들어가면 실행될 함수를 정의합니다 쿼리의 필터 기능을 이용해서 클릭한 태그와 일치하는 태그를 가진 모든 게시물을 찾아서 보여줍니다 템플릿 수정하기 태그를 클릭하면 해당 태그의 게시물 목록으로 이동할 수 있도록 템플릿을 수정합니다 실행 및 테스트 서버를 열고 블로그 상세페이지에서 태그를 클릭해 잘 작동하는지 테스트해봅시다 아래는 실제 화면 입니다 블로그 상세 페이지 태그 페이지 블로그상세페이지 태그페이지 태그를 클릭하면 그 태그가 포함된 게시물만 보여주는 것을 확인할 수 있습니다

